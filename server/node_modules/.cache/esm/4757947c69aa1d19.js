let sinon,proxyquire;_69a‍.w("sinon",[["default",["sinon"],function(v){sinon=v}]]);_69a‍.w("proxyquire",[["default",["proxyquire"],function(v){proxyquire=v}]]);//import app from '../app'


const test = require('ava')
const request = require('supertest')
const version = '/v1';

const sandbox= sinon.createSandbox()

let app = null;
let userStub = null;


test.before((t) => {
  userStub = {
    save () {}
  }
  userStub['@global'] = true

  sandbox.stub(userStub, 'save')
  userStub.save.withArgs({}).returns(true)

  app = proxyquire('../app', {
    './models/userModel': userStub
  })
})

test.after(() => {
  sandbox.restore()
})


/**
 * Save user data:
 * Given an user with his name and valid email
 * When the user send his data to the system
 * Then the system must sae the user data
 *
*/
test.cb('save valid user data', (t) => {
  // Given a user with his name

  const user = { name: 'john', email: 'john.doe@mail.com' }

  // When the user send his data to the system
  request(app)
    .post(`${version}/users`)
    .send(user)
    .expect('Content-Type', /json/)
    //.expect('Content-Length', '2')
    .expect(200)
    .end(function (err, res) {
      t.falsy(err, 'should not error')
      t.end()

       // Then the system must save the user data
      sandbox.assert.calledOnce(userStub.save)
      sandbox.assert.calledWith(userStub.save, user)
    })
})

/* app.get('/user', function(req, res) {
    res.status(200).json({ name: 'john' });
  }); */

/* request(app)
    .get('/user')
    .expect('Content-Type', /json/)
    .expect('Content-Length', '15')
    .expect(200)
    .end(function (err, res) {
        if (err) throw err;
    }); */
